# BUILD bagel file

# TODO: make libgccjit build script into bagel file
cc_import(
    name = "libgccjit",
    hdrs = ["install/include/libgccjit.h"],
    shared_library = "install/lib/libgccjit.so.0",
    system_provided = 0,
)

config_setting(
    name = "use_system_libgccjit",
    values = {"define": "use_system_libgccjit=true"},
)

cc_library(
    name = "sds",
    srcs = ["lib/sds.c"],
    hdrs = [
        "lib/sds.h",
        "lib/sdsalloc.h",
    ],
)

cc_library(
    name = "log",
    srcs = ["lib/log.c"],
    hdrs = ["lib/log.h"],
)

cc_import(
    name = "stb_ds",
    hdrs = ["lib/stb_ds.h"],
)

cc_binary(
    name = "kapuc_with_system_libgccjit",
    srcs = [
        "lib/env_args.h",
        "lib/log.c",
        "lib/log.h",
        "lib/sds.c",
        "lib/sds.h",
        "lib/sdsalloc.h",
        "lib/stb_ds.h",
        "src/kapuc/code_tree.c",
        "src/kapuc/code_tree.h",
        "src/kapuc/helper.h",
        "src/kapuc/lex.c",
        "src/kapuc/lex.h",
        "src/kapuc/main.c",
        "src/kapuc/parse.c",
        "src/kapuc/parse.h",
    ],
    copts = [
        "-O2",
    ],
    linkopts = ["-lgccjit"],
    deps = [
        "log",
        "sds",
        "stb_ds",
    ],
)

cc_binary(
    name = "kapuc_without_system_libgccjit",
    srcs = [
        "lib/env_args.h",
        "lib/log.c",
        "lib/log.h",
        "lib/sds.c",
        "lib/sds.h",
        "lib/sdsalloc.h",
        "lib/stb_ds.h",
        "src/kapuc/code_tree.c",
        "src/kapuc/code_tree.h",
        "src/kapuc/helper.h",
        "src/kapuc/lex.c",
        "src/kapuc/lex.h",
        "src/kapuc/main.c",
        "src/kapuc/parse.c",
        "src/kapuc/parse.h",
    ],
    copts = [
        "-O2",
    ],
    deps = [
        "log",
        "sds",
        "stb_ds",
        ":libgccjit",
    ],
)

load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")

refresh_compile_commands(
    name = "refresh_compile_commands_system_libgccjit",
    targets = {
        "//:kapuc": "--define use_system_libgccjit=true",
    },
)

refresh_compile_commands(
    name = "refresh_compile_commands_local_libgccjit",
    targets = {
        "//:kapuc": "",
    },
)

alias(
    name = "kapuc",
    actual = select({
        ":use_system_libgccjit": ":kapuc_with_system_libgccjit",
        "//conditions:default": ":kapuc_without_system_libgccjit",
    }),
)

alias(
    name = "refresh_compile_commands",
    actual = select({
        ":use_system_libgccjit": ":refresh_compile_commands_system_libgccjit",
        "//conditions:default": ":refresh_compile_commands_local_libgccjit",
    }),
)

filegroup(
    name = "clang_tidy_config",
    srcs = [".clang-tidy"],
    visibility = ["//visibility:public"],
)
